bootcmd:
  - blkid /dev/disk/by-id/google-data || mkfs.ext4 -L data /dev/disk/by-id/google-data
  - mkdir -p /mnt/disks/data
mounts:
  - [ /dev/disk/by-id/google-data, /mnt/disks/data, auto, "rw,noatime,discard,nobarrier,nodev" ]

users:
  - name: bs
    uid: 2000

write_files:
  - path: /home/bs/default.conf
    permissions: 0644
    owner: root
    content: |
        log_format withtime '$remote_addr - $remote_user [$time_local] '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent" '
                            'rt="$request_time" uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

        server {

            access_log /var/log/nginx/access.log withtime;
            error_log /var/log/nginx/error.log;

            server_name _;
            listen 80 default_server;
            server_tokens off;

            location /api/ {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST';
                add_header X-XSS-Protection "1; mode=block";

                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_pass http://0.0.0.0:9292/;
            }
        }

  - path: /home/bs/bitcoin.conf
    permissions: 0644
    owner: root
    content: |
        rpcuser=${rpcuser}
        rpcpassword=${rpcpass}
        rpcport=${rpcport}
        txindex=1
        dbcache=4000

  - path: /home/bs/lightning.conf
    permissions: 0644
    owner: root
    content: |
        alias=ionosphere
        bitcoin-rpcuser=${rpcuser}
        bitcoin-rpcpassword=${rpcpass}
        bitcoin-rpcport=${rpcport}
        announce-addr=${announce_addr}
        bind-addr=0.0.0.0

  - path: /etc/systemd/system/nginx.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Nginx proxy
        Wants=gcr-online.target
        After=ionosphere.service

        [Service]
        Restart=always
        RestartSec=1
        Environment=HOME=/home/bs
        ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
        ExecStartPre=/sbin/iptables -A INPUT -m tcp -p tcp --dport 80 -j ACCEPT
        ExecStart=/usr/bin/docker run \
            --network=host \
            --pid=host \
            --name=nginx \
            -v /home/bs/default.conf:/etc/nginx/conf.d/default.conf:ro \
            "nginx:latest"
        ExecStop=/usr/bin/docker stop nginx
        ExecStopPost=/usr/bin/docker rm nginx
        ExecStopPost=/sbin/iptables -D INPUT -m tcp -p tcp --dport 80 -j ACCEPT

  - path: /etc/systemd/system/bitcoin.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Bitcoin node
        Wants=gcr-online.target
        After=gcr-online.service

        [Service]
        Restart=always
        RestartSec=3
        Environment=HOME=/home/bs
        ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
        ExecStartPre=/usr/bin/docker pull ${bitcoin_docker}
        ExecStart=/usr/bin/docker run \
            --network=host \
            --pid=host \
            --name=bitcoin \
            -v /home/bs/bitcoin.conf:/root/.bitcoin/bitcoin.conf:ro \
            -v /mnt/disks/data/testnet:/root/.bitcoin:rw \
            "${bitcoin_docker}" ${bitcoin_cmd}
        ExecStop=/usr/bin/docker exec bitcoin bitcoin-cli stop
        ExecStop=/usr/bin/sleep 10
        ExecStop=/usr/bin/docker stop bitcoin
        ExecStopPost=/usr/bin/docker rm bitcoin

  - path: /etc/systemd/system/lightning.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Lightning node
        Wants=gcr-online.target
        After=bitcoin.service

        [Service]
        Restart=always
        RestartSec=3
        Environment=HOME=/home/bs
        ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
        ExecStartPre=/usr/bin/docker pull ${lightning_docker}
        ExecStartPre=/sbin/iptables -A INPUT -p tcp --dport ${lightning_port} -j ACCEPT
        ExecStart=/usr/bin/docker run \
            --network=host \
            --pid=host \
            --name=lightning \
            -v /home/bs/lightning.conf:/root/.lightning/lightning.conf:ro \
            -v /mnt/disks/data/lightning:/root/.lightning:rw \
            "${lightning_docker}" ${lightning_cmd}
        ExecStop=/usr/bin/docker exec lightning lightning-cli stop
        ExecStop=/usr/bin/sleep 10
        ExecStop=/usr/bin/docker stop lightning
        ExecStopPost=/usr/bin/docker rm lightning
        ExecStopPost=/sbin/iptables -D INPUT -p tcp --dport ${lightning_port} -j ACCEPT

  - path: /etc/systemd/system/ionosphere.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Ionosphere daemon
        Wants=gcr-online.target
        After=lightning.service

        [Service]
        Restart=always
        RestartSec=3
        Environment=HOME=/home/bs
        ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
        ExecStartPre=/usr/bin/docker pull ${ionosphere_docker}
        ExecStartPre=/sbin/iptables -A INPUT -p tcp -s localhost --dport 9292 -j ACCEPT
        ExecStartPre=/usr/bin/docker run \
            --user root \
            -v /mnt/disks/data/ionosphere:/data \
            --entrypoint bash \
            --rm \
            "${ionosphere_docker}" \
            -c 'chown -R ionosphere:ionosphere /data'
        ExecStart=/usr/bin/docker run \
            --network=host \
            --pid=host \
            --name=ionosphere \
            -v /mnt/disks/data/ionosphere:/data \
            -e "RACK_ENV=production" \
            -e "CHARGE_ROOT=http://api-token:${rpcpass}@localhost:9112" \
            -e "CALLBACK_URI_ROOT=http://localhost:9292" \
            "${ionosphere_docker}"
        ExecStop=/usr/bin/docker stop ionosphere
        ExecStopPost=/usr/bin/docker rm ionosphere
        ExecStopPost=/sbin/iptables -D INPUT -p tcp -s localhost --dport 9292 -j ACCEPT

  - path: /etc/systemd/system/ionosphere-tx.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Ionosphere Transmitter daemon
        Wants=gcr-online.target
        After=ionosphere.service

        [Service]
        Restart=always
        RestartSec=3
        Environment=HOME=/home/bs
        ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
        ExecStart=/usr/bin/docker run \
            --network=host \
            --pid=host \
            --name=ionosphere \
            -v /mnt/disks/data/ionosphere:/data \
            -e "RACK_ENV=production" \
            -e "CHARGE_ROOT=http://api-token:${rpcpass}@localhost:9112" \
            -e "CALLBACK_URI_ROOT=http://localhost:9292" \
            "${ionosphere_docker}" ./docker_entrypoint_transmitter.sh
        ExecStop=/usr/bin/docker stop ionosphere
        ExecStopPost=/usr/bin/docker rm ionosphere


  - path: /etc/systemd/system/charge.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Charge instance
        Wants=gcr-online.target
        After=ionosphere.service

        [Service]
        Restart=always
        RestartSec=200
        Environment=HOME=/home/bs
        ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
        ExecStartPre=/usr/bin/docker pull ${charge_docker}
        ExecStartPre=/sbin/iptables -A INPUT -p tcp -s localhost --dport 9112 -j ACCEPT
        ExecStart=/usr/bin/docker run \
            --network=host \
            --pid=host \
            --name=charge \
            -v /mnt/disks/data/lightning:/etc/lightning:ro \
            -v /mnt/disks/data/charge:/data:rw \
            -e "API_TOKEN=${rpcpass}" \
            "${charge_docker}"
        ExecStop=/usr/bin/docker stop charge
        ExecStopPost=/usr/bin/docker rm charge
        ExecStopPost=/sbin/iptables -D INPUT -p tcp -s localhost --dport 9112 -j ACCEPT

runcmd:
  - systemctl daemon-reload
  - systemctl start bitcoin.service
  - systemctl enable bitcoin.service
  - systemctl start lightning.service
  - systemctl enable lightning.service
  - systemctl start ionosphere.service
  - systemctl enable ionosphere.service
  - systemctl start charge.service
  - systemctl enable charge.service
  - systemctl start nginx.service
  - systemctl enable nginx.service
